@{
    ViewBag.Title = "Map";
}

<style>
    #map {
        height: 85vh;
    }
</style>

<div class="row">
    <div class="col-lg-2">
		<div class="col-lg-10 btn-group" data-toggle="buttons">
			<label class="btn btn-info active">
				<input type="radio" name="modus" id="one" autocomplete="off" checked /> Nearby POI's
			</label>
			<label class="btn btn-info">
				<input type="radio" name="modus" id="two" autocomplete="off" /> Walking distance
			</label>
			<label class="btn btn-info">
				<input type="radio" name="modus" id="three" autocomplete="off" /> Walking time
			</label>
		</div>
		<h3>Selected station</h3>
		<div id="SelectedStation"></div>
    </div>
    <div class="col-lg-10">
        <div id="map"></div>
    </div>
</div>

<script>
	var map;
	var StationMarkers = {};
	var PoiMarkers = [];
	var infoWindow;
	var locations = @Html.Raw(tir.web.Models.Station.GetLocations());

	function appropriateIcon(type) {
		if (type == "Bus") {
			return '@Url.Content("../Images/bus.png")'
		} else if (type == "Metro") {
			return '@Url.Content("../Images/metro.png")'
		} else if (type == "Trein") {
			return '@Url.Content("../Images/train.png")'
		} else if (type == "Tram") {
			return '@Url.Content("../Images/tram.png")'
		} else {
			return '@Url.Content("../Images/help.png")'
		}
	}

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 51.9182711, lng: 4.4791135 },
			zoom: 12,
			styles: tirStyle
		});

		infowindow = new google.maps.InfoWindow();

        var transitLayer = new google.maps.TransitLayer();
		transitLayer.setMap(map);

		for (i = 0; i < locations.length; i++) {
			var position = new google.maps.LatLng(locations[i][2], locations[i][3]);
			var marker = new google.maps.Marker({
				position: position,
				map: map,
				icon: appropriateIcon(locations[i][5])
			});
			google.maps.event.addListener(marker, 'click', (function (marker, i) {
				return function () {
					infowindow.setContent(locations[i][1]);
					infowindow.setOptions({ maxWidth: 200 });
					infowindow.open(map, marker);
					document.getElementById('SelectedStation').innerHTML = locations[i][5] + ": " + locations[i][0];
					nearbyPlaces(locations[i]);
				}
			})(marker, i));

			StationMarkers[locations[i][4]] = marker;
		}

		var markerCluster = new MarkerClusterer(map, StationMarkers, { imagePath: '@Url.Content("../Images/m")' });

	}

	function nearbyPlaces(givenStation) {
		var service = new google.maps.places.PlacesService(map);
		service.nearbySearch({
			location: { lat: givenStation[2], lng: givenStation[3] },
			radius: 500
		}, callback);
	}

	function callback(results) {
		console.log("=>" + PoiMarkers.length)
		if (PoiMarkers.length > 0) {
			for (var i = 0; i < PoiMarkers.length; i++) {
				PoiMarkers[i].setMap(null);
			}
			PoiMarkers = [];
		}

		for (var i = 0; i < results.length; i++) {
			createMarker(results[i]);
		}	
	}

	function createMarker(place) {
		var marker = new google.maps.Marker({
			position: place.geometry.location,
			map: map
		});
		google.maps.event.addListener(marker, 'click', function () {
			infowindow.setContent(place.name);
			infowindow.open(map, marker);
		});
		PoiMarkers.push(marker);
	}

	var tirStyle = [
		{
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "administrative.land_parcel",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "administrative.neighborhood",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "transit",
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "transit",
			"elementType": "labels.text",
			"stylers": [
				{
					"color": "#ffeb3b"
				},
				{
					"visibility": "off"
				},
				{
					"weight": 2
				}
			]
		},
		{
			"featureType": "transit.station.airport",
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		}
	]

</script>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVBgL5foqZkd313a8S7k1gAq7vnkf2v3Q&libraries=places&callback=initMap"></script>
