@{
    ViewBag.Title = "Map";
}

<style>
    body {
        overflow: hidden;
    }

    .space {
        margin-bottom: 25px;
    }

    #map {
        height: 85vh;
    }
	.container {
		max-width: 100%;
	}

	.modus-toggle {
		width: 100%;
		margin: 20px auto 20px auto;
	}

</style>

@*<!--
    Start of the second tab: The total points of interests the user is interested in.    
-->
<div id="tabContainerAmountPointsOfInterest" hidden>
    <div id="leftSelectablesContainer"  class="col-md-2">
        <!--
            the radius in kilometers
        -->
        <div id="searchRadiusContainer">
            <span>Radius: </span>
            <br />
            <select id="radiusSelectionInKm">
                <option value="0.5">0.5 km</option>
                <option value="1">1 km</option>
                <option value="2">2 km</option>
                <option value="3">3 km</option>
                <option value="4">4 km</option>
                <option value="5">5 km</option>
                <option value="10">10 km</option>
                <option value="15">15 km</option>
                <option value="20">20 km</option>
            </select>
        </div>

        <!--
            The center point of the radius (the location)    
        -->

        <div id="centerPointStationSelectionContainer">
            <span>Station: </span>
            <select id="centerPointStationSelection">
                <!-- **6 -->
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
            </select>
        </div>

        <!--
        **2
        INFORMATION ON FILLING THE SELECTABLE POINTS OF INTERESTS:
        Fill the id with "selectablePointsOfInterests" with the data from the database. I'd use a for each point of interest loop:
            '<input type="checkbox" id=*databaseVariableName* + "CheckBox" class="selectablePointOfInterest" name="PointOfInterest">
                <label>
                    <script>*databaseVariableName*></script>
                </label>'
        -->

        <div id="selectablePointsOfInterests">
            <input type="checkbox" name="PointOfInterest">
            <label>mc donald (DUMMY)</label>
            <br>
            <input type="checkbox" name="PointOfInterest">
            <label>Subway (DUMMY)</label>
            <br>
            <input type="checkbox" name="PointOfInterest">
            <label>KFC (DUMMY)</label>
            <br>
            <input type="checkbox" name="PointOfInterest">
            <label>Pathé (DUMMY)</label>
            <br>
            <input type="checkbox" name="PointOfInterest">
            <label>de kuip (DUMMY)</label>
            <br>
        </div>
    </div>
</div>

<!--
    Start of the third tab: the walking time from point A to B.
-->
<div id="tabContainerWalkTime">
    <div id="tabContainerWalkingTime">
        <div class="col-md-1"></div>
        <div id="StartStationSelectionContainerWalkingTime" class="col-md-6 stationSelectionContainer">
            <span>Start place: </span>
            <select id="startStationSelectionWalkingTime">
                <!-- **7 -->
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
            </select>
        </div>

        <div id="destinationStationSelectionContainerWalkingTime" class="col-md-4 stationSelectionContainer">
            <span>Desired place: </span>
            <select id="destinationStationSelectionWalkingTime">
                <!-- **8 -->
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
                <option value="trainBlaakDUMMY">Train (blaak) (DUMMY)</option>
            </select>
        </div>
        <div id="walkingTimeDirectionNotation" class="col-md-2">
            <!-- **9 -->
            <span>direction x DUMMY</span>
            <br />
            <br />
            <span>direction x DUMMY</span>
            <br />
            <br />
            <span>direction x DUMMY</span>
            <br />
            <br />
            <span>direction x DUMMY</span>
            <br />
            <br />
            <span>direction x DUMMY</span>
            <br />
            <br />
            <span>direction x DUMMY</span>
            <br />
            <br />
            <span>direction x DUMMY</span>
            <br />
            <br />
        </div>
    </div>
</div>*@

<div class="container">
	<div class="row">
		<div class="col-md-3">
			<h3>Selected station</h3>
			<div id="SelectedStation"></div>
			<h3>Places:</h3>
			<table class="table table-sm">
				<tr>
					<th scope="col">Name</th>
					<th scope="col">Distance</th>
					<th scope="col">Time</th>
				</tr>
				<tbody id="results">

				</tbody>
			</table>
		</div>
		<div id="map" class="col-md-9"></div>
	</div>
</div>


<script>
	var map;
	var StationMarkers = {};
	var PoiMarkers = [];
	var infoWindow;
	var locations = @Html.Raw(tir.web.Models.Station.GetLocations());
	var directionsService;
	var directionsDisplay;
	var placesList = document.getElementById('results');

	function appropriateIcon(type) {
		if (type == "Bus") {
			return '@Url.Content("../Images/bus.png")'
		} else if (type == "Metro") {
			return '@Url.Content("../Images/metro.png")'
		} else if (type == "Trein") {
			return '@Url.Content("../Images/train.png")'
		} else if (type == "Tram") {
			return '@Url.Content("../Images/tram.png")'
		} else {
			return '@Url.Content("../Images/help.png")'
		}
	}

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 51.9182711, lng: 4.4791135 },
			zoom: 12,
			styles: tirStyle
		});

		directionsService = new google.maps.DirectionsService;
		directionsDisplay = new google.maps.DirectionsRenderer;

		infowindow = new google.maps.InfoWindow();

        var transitLayer = new google.maps.TransitLayer();
		transitLayer.setMap(map);
		directionsDisplay.setMap(map);

		for (i = 0; i < locations.length; i++) {
			var position = new google.maps.LatLng(locations[i][2], locations[i][3]);
			var marker = new google.maps.Marker({
				position: position,
				map: map,
				icon: appropriateIcon(locations[i][5])
			});
			google.maps.event.addListener(marker, 'click', (function (marker, i) {
				return function () {
					infowindow.setContent(locations[i][1]);
					infowindow.setOptions({ maxWidth: 200 });
					infowindow.open(map, marker);
					var span = document.createElement('span');
					var station = document.getElementById('SelectedStation')
					span.textContent = locations[i][5] + ": " + locations[i][0];
					span.id = locations[i][2] + ", " + locations[i][3];
					while (station.firstChild) {
						station.removeChild(station.firstChild);
					}
					station.appendChild(span);
					nearbyPlaces(locations[i]);
				}
			})(marker, i));

			StationMarkers[locations[i][4]] = marker;
		}
		var markerCluster = new MarkerClusterer(map, StationMarkers, { imagePath: '@Url.Content("../Images/m")' });
	}

    function route(directionsService, directionsDisplay, clickedDest) {
        directionsService.route({
            origin: document.getElementById('SelectedStation').firstChild.id,
            destination: clickedDest.geometry.location,
            travelMode: 'WALKING'
        }, function (response, status) {
            if (status === 'OK') {
                var row = placesList.insertRow(0);

                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);

                cell1.innerHTML = clickedDest.name
                cell2.innerHTML = response["routes"][0]["legs"][0]["distance"]["text"]
                cell3.innerHTML = response["routes"][0]["legs"][0]["duration"]["text"]

                placesList.appendChild(row);
            } else {
                //window.alert('Directions request failed due to ' + status);
            }
        });
    }

    function drawRoute(directionsService, directionsDisplay, clickedDest) {
        directionsService.route({
            origin: document.getElementById('SelectedStation').firstChild.id,
            destination: clickedDest.geometry.location,
            travelMode: 'WALKING'
        }, function (response, status) {
            if (status === 'OK') {
                directionsDisplay.setDirections(response)
            } else {
                //window.alert('Directions request failed due to ' + status);
            }
        });
    }

	function nearbyPlaces(givenStation) {
		var diffPlaces = ['atm', 'bar'];

		diffPlaces.forEach(place => {
			var service = new google.maps.places.PlacesService(map);
			service.nearbySearch({
				location: { lat: givenStation[2], lng: givenStation[3] },
				radius: 500,
				keyword: place
			}, callback);
		});
	}

	function callback(results) {
		if (PoiMarkers.length > 0) {
			for (var i = 0; i < PoiMarkers.length; i++) {
				PoiMarkers[i].setMap(null);
			}
			PoiMarkers = [];
		}

		while (placesList.firstChild) {
			placesList.removeChild(placesList.firstChild);
		}

		for (var i = 0; i < results.length; i++) {
			createMarker(results[i]);
		}	
	}

	function routeInfo(directionsService, clickedDest) {
		return directionsService.route({
			origin: document.getElementById('SelectedStation').firstChild.id,
			destination: clickedDest,
			travelMode: 'WALKING'
		});
	}

	function createMarker(place) {
		var marker = new google.maps.Marker({
			position: place.geometry.location,
			map: map
		});

		google.maps.event.addListener(marker, 'click', function () {
			infowindow.setContent(place.name);
			infowindow.open(map, marker);
			drawRoute(directionsService, directionsDisplay, place);
        });

        //Get route and add it's distance and duration to the list
        route(directionsService, directionsDisplay, place)

		PoiMarkers.push(marker);
	}

	var tirStyle = [
		{
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "administrative.land_parcel",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "administrative.neighborhood",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "transit",
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "transit",
			"elementType": "labels.text",
			"stylers": [
				{
					"color": "#ffeb3b"
				},
				{
					"visibility": "off"
				},
				{
					"weight": 2
				}
			]
		},
		{
			"featureType": "transit.station.airport",
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		}
	]

</script>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBAC5aRtEa7uLiQkBht9xzShPxRnwsjxHs&libraries=places&callback=initMap"></script>
