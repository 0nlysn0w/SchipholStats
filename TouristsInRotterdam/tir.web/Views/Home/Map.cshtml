@{
    ViewBag.Title = "Map";
}

<style>
    html, body, .body-content, .container-fluid, .col-lg-9, #map {
        height: 100%;
    }
    .col-lg-9 {
        padding: 0;
    }
    .col-lg-3 {
        margin-top: 51px;
    }

	.placesTag {
		margin-top: 40px;
	}

/*stuff for the select box*/

	.multiselect {
		width: 200px;
		position: absolute;
	}

	.selectBox {
		position: relative;
	}

	.selectBox select {
		width: 100%;
		font-weight: bold;
	}

	.overSelect {
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
	}

	#typeCheckboxes {
		display: none;
		border: 1px #dadada solid;
		background: white;
		column-count: 2;
		width: 500px;
	}

	#typeCheckboxes label {
		display: block;
		padding: 5px;
	}

	#typeCheckboxes label:hover {
		background-color: #1e90ff;
	}

	#typeCheckboxes input {
		margin-right: 5px;
	}

</style>

<div class="container-fluid">
	<div class="col-lg-3">
		<h2>Station</h2>
		<div id="SelectedStation"></div>

		<!-- Button trigger modal -->
		<button type="button" class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-lg">
			Filter options
		</button>

		<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-lg">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<div id="typeCheckboxes">
						</div>

					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
						<button type="button" class="btn btn-primary" data-dismiss="modal">Save changes</button>
					</div>
				</div>
			</div>
		</div>

		<form>
			<div class="multiselect">
				<div class="selectBox" onclick="showCheckboxes()">
					<select>
						<option>Select an option</option>
					</select>
					<div class="overSelect"></div>
				</div>
				@*<div id="typeCheckboxes">
				</div>*@
			</div>
		</form>

		<h3 class="placesTag">Places</h3>
		<table class="table">
			<tr>
				<th>Name</th>
				<th>Distance</th>
				<th>Time</th>
			</tr>
			<tbody id="results"></tbody>
		</table>
	</div>
    <div class="col-lg-9">
        <div id="map"></div>
    </div>
</div>

<script>
	var map;
	var StationMarkers = {};
	var PoiMarkers = [];
	var infoWindow;
	var locations = @Html.Raw(tir.web.Models.Station.GetLocations());
	var directionsService;
	var directionsDisplay;
	var placesList = document.getElementById('results');
	populateDropdown();


	function appropriateIcon(type) {
		if (type == "Bus") {
			return '@Url.Content("../Images/bus.png")'
		} else if (type == "Metro") {
			return '@Url.Content("../Images/metro.png")'
		} else if (type == "Trein") {
			return '@Url.Content("../Images/train.png")'
		} else if (type == "Tram") {
			return '@Url.Content("../Images/tram.png")'
		} else {
			return '@Url.Content("../Images/help.png")'
		}
	}

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 51.9182711, lng: 4.4791135 },
			zoom: 12,
			styles: tirStyle
		});

		directionsService = new google.maps.DirectionsService;
		directionsDisplay = new google.maps.DirectionsRenderer;

		infowindow = new google.maps.InfoWindow();

        var transitLayer = new google.maps.TransitLayer();
		transitLayer.setMap(map);
		directionsDisplay.setMap(map);
		populateDropdown();

		for (i = 0; i < locations.length; i++) {
			var position = new google.maps.LatLng(locations[i][2], locations[i][3]);
			var marker = new google.maps.Marker({
				position: position,
				map: map,
				icon: appropriateIcon(locations[i][5])
			});
			google.maps.event.addListener(marker, 'click', (function (marker, i) {
				return function () {
					var chosenTypes = submitTypes();
					infowindow.setContent(locations[i][1]);
					infowindow.setOptions({ maxWidth: 200 });
					infowindow.open(map, marker);
					var h4 = document.createElement('h4');
					var station = document.getElementById('SelectedStation')
					h4.textContent = locations[i][5] + ": " + locations[i][0];
					h4.id = locations[i][2] + ", " + locations[i][3];
					while (station.firstChild) {
						station.removeChild(station.firstChild);
					}
					station.appendChild(h4);
					nearbyPlaces(locations[i], chosenTypes);
				}
			})(marker, i));

			StationMarkers[locations[i][4]] = marker;
		}
		var markerCluster = new MarkerClusterer(map, StationMarkers, { imagePath: '@Url.Content("../Images/m")' });
	}

	function route(directionsService, directionsDisplay, clickedDest) {
		sleep(100)
        directionsService.route({
            origin: document.getElementById('SelectedStation').firstChild.id,
            destination: clickedDest.geometry.location,
            travelMode: 'WALKING'
        }, function (response, status) {
			if (status === 'OK') {
				
                var row = placesList.insertRow(0);

                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);

                cell1.innerHTML = clickedDest.name
                cell2.innerHTML = response["routes"][0]["legs"][0]["distance"]["text"]
                cell3.innerHTML = response["routes"][0]["legs"][0]["duration"]["text"]

                row.onclick = function () { drawRoute(directionsService, directionsDisplay, clickedDest) }

                placesList.appendChild(row);
            } else {
                //window.alert('Directions request failed due to ' + status);
            }
        });
    }

    function drawRoute(directionsService, directionsDisplay, clickedDest) {
        directionsService.route({
            origin: document.getElementById('SelectedStation').firstChild.id,
            destination: clickedDest.geometry.location,
            travelMode: 'WALKING'
        }, function (response, status) {
            if (status === 'OK') {
                directionsDisplay.setDirections(response)
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }

	function nearbyPlaces(givenStation, chosenTypes) {
		var service = new google.maps.places.PlacesService(map);
		service.nearbySearch({
			location: { lat: givenStation[2], lng: givenStation[3] },
			radius: 500,
			type: chosenTypes
		}, callback);

	}

	function callback(results) {
		if (PoiMarkers.length > 0) {
			for (var i = 0; i < PoiMarkers.length; i++) {
				PoiMarkers[i].setMap(null);
			}
			PoiMarkers = [];
		}

		while (placesList.firstChild) {
			placesList.removeChild(placesList.firstChild);
		}

		for (var i = 0; i < results.length; i++) {
			createMarker(results[i]);
		}	
	}

	function routeInfo(directionsService, clickedDest) {
		return directionsService.route({
			origin: document.getElementById('SelectedStation').firstChild.id,
			destination: clickedDest,
			travelMode: 'WALKING'
		});
	}

	function createMarker(place) {
		var marker = new google.maps.Marker({
			position: place.geometry.location,
			map: map
		});

		google.maps.event.addListener(marker, 'click', function () {
			infowindow.setContent(place.name);
			infowindow.open(map, marker);
			drawRoute(directionsService, directionsDisplay, place);
        });

      route(directionsService, directionsDisplay, place);

		PoiMarkers.push(marker);
	}

	function sleep(milliseconds) {
		var start = new Date().getTime();
		for (var i = 0; i < 1e7; i++) {
			if ((new Date().getTime() - start) > milliseconds) {
				break;
			}
		}
	}

	//js shit for the dropdown
	var expanded = false;

	function showCheckboxes() {
		var typeCheckboxes = document.getElementById("typeCheckboxes");
		if (!expanded) {
			typeCheckboxes.style.display = "block";
			expanded = true;
		} else {
			typeCheckboxes.style.display = "none";
			expanded = false;
		}
	}

	var select = document.getElementById("typeCheckboxes");
	function populateDropdown() {
		for (var i = 0; i < placeTypes.length; i++) {

			var checkbox = document.createElement('input');
			checkbox.type = "checkbox";
			checkbox.className = "checks";
			checkbox.value = placeTypes[i][0];
			checkbox.id = placeTypes[i][0];

			var label = document.createElement('label')
			label.htmlFor = placeTypes[i][0];
			label.appendChild(checkbox);
			label.appendChild(document.createTextNode(placeTypes[i][1]));

			select.appendChild(label);
		}
	}

	function submitTypes() {
		var checks = document.getElementsByClassName('checks');

		var selectedTypes = [];

		for (var i = 0; i < placeTypes.length; i++) {
			if (checks[i].checked === true) {
				//str += checks[i].value + " ";

				selectedTypes.push(checks[i].value)
			}
		}
		console.log(selectedTypes);
		return selectedTypes
	}



	var tirStyle = [
		{
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "administrative.land_parcel",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "administrative.neighborhood",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "transit",
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		},
		{
			"featureType": "transit",
			"elementType": "labels.text",
			"stylers": [
				{
					"color": "#ffeb3b"
				},
				{
					"visibility": "off"
				},
				{
					"weight": 2
				}
			]
		},
		{
			"featureType": "transit.station.airport",
			"elementType": "labels",
			"stylers": [
				{
					"visibility": "off"
				}
			]
		}
	]

	var placeTypes = [
		["accounting", "accounting"],
		["airport", "airport"],
		["amusement_park", "amusement_park"],
		["aquarium", "aquarium"],
		["art_gallery", "art_gallery"],
		["atm", "atm"],
		["bakery", "bakery"],
		["bank", "bank"],
		["bar", "bar"],
		["beauty_salon", "beauty_salon"],
		["bicycle_store", "bicycle_store"],
		["book_store", "book_store"],
		["bowling_alley", "bowling_alley"],
		["bus_station", "bus_station"],
		["cafe", "cafe"],
		["campground", "campground"],
		["car_dealer", "car_dealer"],
		["car_rental", "car_rental"],
		["car_repair", "car_repair"],
		["car_wash", "car_wash"],
		["casino", "casino"],
		["cemetery", "cemetery"],
		["church", "church"],
		["city_hall", "city_hall"],
		["clothing_store", "clothing_store"],
		["convenience_store", "convenience_store"],
		["courthouse", "courthouse"],
		["dentist", "dentist"],
		["department_store", "department_store"],
		["doctor", "doctor"],
		["electrician", "electrician"],
		["electronics_store", "electronics_store"],
		["embassy", "embassy"],
		["fire_station", "fire_station"],
		["florist", "florist"],
		["funeral_home", "funeral_home"],
		["furniture_store", "furniture_store"],
		["gas_station", "gas_station"],
		["gym", "gym"],
		["hair_care", "hair_care"],
		["hardware_store", "hardware_store"],
		["hindu_temple", "hindu_temple"],
		["home_goods_store", "home_goods_store"],
		["hospital", "hospital"],
		["insurance_agency", "insurance_agency"],
		["jewelry_store", "jewelry_store"],
		["laundry", "laundry"],
		["lawyer", "lawyer"],
		["library", "library"],
		["liquor_store", "liquor_store"],
		["local_government_office", "local_government_office"],
		["locksmith", "locksmith"],
		["lodging", "lodging"],
		["meal_delivery", "meal_delivery"],
		["meal_takeaway", "meal_takeaway"],
		["mosque", "mosque"],
		["movie_rental", "movie_rental"],
		["movie_theater", "movie_theater"],
		["moving_company", "moving_company"],
		["museum", "museum"],
		["night_club", "night_club"],
		["painter", "painter"],
		["park", "park"],
		["parking", "parking"],
		["pet_store", "pet_store"],
		["pharmacy", "pharmacy"],
		["physiotherapist", "physiotherapist"],
		["plumber", "plumber"],
		["police", "police"],
		["post_office", "post_office"],
		["real_estate_agency", "real_estate_agency"],
		["restaurant", "restaurant"],
		["roofing_contractor", "roofing_contractor"],
		["rv_park", "rv_park"],
		["school", "school"],
		["shoe_store", "shoe_store"],
		["shopping_mall", "shopping_mall"],
		["spa", "spa"],
		["stadium", "stadium"],
		["storage", "storage"],
		["store", "store"],
		["subway_station", "subway_station"],
		["supermarket", "supermarket"],
		["synagogue", "synagogue"],
		["taxi_stand", "taxi_stand"],
		["train_station", "train_station"],
		["transit_station", "transit_station"],
		["travel_agency", "travel_agency"],
		["veterinary_care", "veterinary_care"],
		["zoo", "zoo"],
	];
</script>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBAC5aRtEa7uLiQkBht9xzShPxRnwsjxHs&libraries=places&callback=initMap"></script>
